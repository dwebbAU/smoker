from __future__ import unicode_literals
from django.db import models
from django.core.exceptions import ValidationError
from django.utils.translation import ugettext as _
from datetime import datetime

class Recipe(models.Model):
    created = models.DateTimeField(auto_now_add=True)
    title = models.CharField(blank=False, max_length=100)
    targetInternalTemp = models.FloatField(blank=False)
    maxAmbientTemp = models.FloatField(blank=False)
    owner = models.ForeignKey('auth.User',related_name='recipes',limit_choices_to={'profile__accountType':'USER'},null=False,blank=False)

    def __str__(self):
        return self.title


class Cook(models.Model):
    created = models.DateTimeField(auto_now_add=True)
    complete = models.BooleanField(default=False)
    controller = models.ForeignKey('auth.User',related_name='cook',limit_choices_to={'profile__accountType':'CONTROLLER'})
    recipe = models.ForeignKey(Recipe,related_name='cook')
    owner = models.ForeignKey('auth.User',related_name='cooks',limit_choices_to={'profile__accountType':'USER'})
    warning = models.BooleanField(default=False)
    warning_message = models.CharField(max_length=200,blank=True,null=True)

    def clean(self):
        for cook in self.controller.cook.all():
          if not cook.complete and cook != self:
            raise ValidationError(_('Controller is already involved in an active cook.'))

    def __str__(self):
      return self.created.strftime('%d/%m/%y') + " - " + self.recipe.title



class PIDController(models.Model):
  Kp = models.PositiveSmallIntegerField(default=1,blank=False,null=False)
  Kd = models.PositiveSmallIntegerField(default=1,blank=False,null=False)
  Ki = models.PositiveSmallIntegerField(default=1,blank=False,null=False)
  Cp = models.IntegerField(default=0,blank=False,null=False)
  Ci = models.IntegerField(default=0,blank=False,null=False)
  Cd = models.IntegerField(default=0,blank=False,null=False)
  current_error = models.IntegerField(default=0,blank=False,null=False)
  previous_error = models.IntegerField(default=0,blank=False,null=False)
  current_time = models.DateTimeField(blank=True,null=True)
  previous_time = models.DateTimeField(blank=True,null=True)
  cook = models.OneToOneField(Cook,related_name='PIDController')

  def save(self, *args, **kwargs):
    self.current_time = datetime.now()
    self.previous_time = self.current_time
    super(PIDController,self).save(*args, **kwargs)

  def calculate_target_speed_fan(self):

    file = open('/home/ubuntu/log','a')

    self.current_time = datetime.now()

    file.write('current_error: ' + str(self.current_error) + '\n')

    dt = self.current_time - self.previous_time
    de = self.current_error - self.previous_error

    file.write('dt: ' + str(dt) + '\n')
    file.write('de: ' + str(de) + '\n')
    self.Cp = self.Kp * self.current_error

    file.write('Cp: ' + str(self.Cp) + '\n')    


    self.Ci = 0
    sensordata = self.cook.sensordata.all()
    for i in range(0,sensordata.count()):
      if i > 0:
        self.Ci += (self.cook.recipe.maxAmbientTemp - sensordata[i].tempAmbient) / (sensordata[i].created - sensordata[(i-1)].created).total_seconds()
        file.write('run: ' + str(self.Ci) + '\n')
        file.write('temp: ' + str(self.cook.recipe.maxAmbientTemp - sensordata[i].tempAmbient) + '\n')
        file.write('reading created: ' + str(sensordata[i].created) + '\n')
        file.write('diffs: ' + str((sensordata[i].created - sensordata[(i-1)].created).total_seconds()) + '\n')
        file.write('\n\n')
      else:
        self.Ci = 0 

    
    file.write('Ci: ' + str(self.Ci) + '\n')
  
    self.Cd = 0
    if dt.total_seconds() > 0:
      self.Cd = de/dt.total_seconds()

    file.write('Cd: ' + str(self.Cd) + '\n')     

    self.previous_time = self.current_time
    self.previous_error = self.current_error

    file.close()

    self.save()
    result = self.Cp + (self.Ki * self.Ci) + (self.Kd * self.Cd)
    if result > 100:
      result = 100
    if result < 0:
      result = 0
    return 0

  target_speed_fan = property(calculate_target_speed_fan)


class SensorData(models.Model):
  created = models.DateTimeField(auto_now_add=True)
  tempAmbient = models.FloatField(blank=False)
  tempInternal = models.FloatField(blank=False)
  speedFan = models.IntegerField(blank=False)
  controller = models.ForeignKey('auth.User', related_name='sensordata',limit_choices_to={'profile__accountType':'CONTROLLER'})
  cook = models.ForeignKey(Cook, related_name='sensordata',blank=True,null=True)

  class Meta:
    ordering = ('created',)
    verbose_name = 'Reading'

  def __str__(self): 
    return self.created.strftime('%H:%M:%S') + " - " + self.controller.username

  def save(self, *args, **kwargs):
    try:
     for cook in self.controller.cook.filter(complete=False): 
        self.cook = cook
        super(SensorData,self).save(*args, **kwargs)
    except Cook.DoesNotExist:
      return


class Profile(models.Model):
  ACCOUNT_TYPES = (
    ('USER','User'),
    ('CONTROLLER','Controller'),
  )

  account = models.OneToOneField('auth.User', related_name='profile')
  accountType = models.CharField(max_length=100,choices=ACCOUNT_TYPES)
  owner = models.ForeignKey('auth.User', related_name='controllerprofile', blank=True, null=True, limit_choices_to={'profile__accountType':'USER'})

  def clean(self):
      if self.accountType == 'CONTROLLER' and self.owner is None:
        raise ValidationError(_('A Controller must have an Owner.'))

  def __str__(self):
    return self.account.username
